This is the test file for the module 0-add_integer.py.

First importing the method from the module:
-------------------------------------------

>>> add_integer = __import__('0-add_integer').add_integer

Testing simple addition with integers:
--------------------------------------

>>> add_integer(1, 1)
2

>>> add_integer(1, 3)
4

>>> add_integer(-5, 1)
-4

>>> add_integer(-6, 8)
2

Testing floating numbers:
-------------------------

>>> add_integer(2.4, 5.3)
7

>>> add_integer(2.7, 9.8)
11

Testing floating and int numbers mixed:
---------------------------------------

>>> add_integer(7.2, 7)
14

>>> add_integer(5, 6.9)
11

Testing non int/float arguments:
--------------------------------

>>> add_integer("a", 7)
Traceback (most recent call last):
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 13, in <module>
    print(add_integer())
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 8, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer

>>> add_integer(7, "a")
Traceback (most recent call last):
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 13, in <module>
    print(add_integer(7, "a"))
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 10, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer

>>> add_integer("a", "b")
Traceback (most recent call last):
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 13, in <module>
    print(add_integer())
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 8, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer

Testing only one argument
-------------------------

>>> add_integer(7)
105

>>> add_integer("a")
Traceback (most recent call last):
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 13, in <module>
    print(add_integer())
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 8, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer

Testing float overflow
----------------------

>>> add_integer(float("inf"))
Traceback (most recent call last):
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 13, in <module>
    print(add_integer(float("inf")))
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 11, in add_integer
    return int(a) + int(b)
OverflowError: cannot convert float infinity to integer

Testing NaN as float

>>> add_integer(float("NaN"))
Traceback (most recent call last):
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 13, in <module>
    print(add_integer(float("NaN")))
  File "/home/iaskasan/holbertonschool-higher_level_programming-2/python-test_driven_development/0-add_integer.py", line 11, in add_integer
    return int(a) + int(b)
ValueError: cannot convert float NaN to integer
